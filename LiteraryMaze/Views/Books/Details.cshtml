@model LiteraryMaze.Data.Book

@{
	ViewData["Title"] = "Details";
}
<style>

	.tabs {
		border: 1px solid #ddd;
		font-family: sans-serif;
		max-width: 100%;
		margin: 50px auto; /* центрира по хоризонтала */
	}

	.tab-buttons {
		display: flex;
		border-bottom: 1px solid #ddd;
	}

	.tab-btn {
		flex: 1;
		padding: 10px;
		cursor: pointer;
		background: #fff;
		border: none;
		border-right: 1px solid #ddd;
		font-weight: bold;
		color: #333;
	}

		.tab-btn:last-child {
			border-right: none;
		}

		.tab-btn.active {
			background: #cf6ffb;
			color: white;
		}

	.tab-content {
		display: none;
		padding: 15px;
		background: #fff;
	}

		.tab-content.active {
			display: block;
		}

	.zoom-wrapper {
		display: flex;
		gap: 30px;
		margin: 50px auto;
		width: max-content;
	}

	.image-container {
		position: relative;
		width: 300px;
		height: auto;
	}

		.image-container img {
			width: 100%;
			display: block;
		}

	.zoom-lens {
		position: absolute;
		border: 2px solid #000;
		width: 100px;
		height: 100px;
		opacity: 0.4;
		background-color: #fff;
		display: none;
		pointer-events: none;
	}

	.zoom-result {
		width: 300px;
		height: 400px;
		border: 1px solid #ccc;
		background-repeat: no-repeat;
		display: none;
	}

	.heart-button {
		background: none;
		border: none;
		padding: 0;
		cursor: pointer;
		transition: transform 0.2s;
	}

		.heart-button:hover {
			transform: scale(1.1);
		}

	#heartIcon {
		stroke: gray;
		fill: none;
		transition: all 0.3s ease;
	}

	.liked #heartIcon {
		stroke: red;
		fill: red;
	}


	/* ///////////////// */
	.cart-button {
		background: none;
		border: none;
		padding: 0;
		cursor: pointer;
		transition: transform 0.2s;
	}

		.cart-button:hover {
			transform: scale(1.1);
		}

	#cartIcon {
		stroke: gray;
		fill: none;
		transition: all 0.3s ease;
	}

	.added-to-cart #cartIcon {
		stroke: green;
		fill: green;
	}

</style>

<h1>Details</h1>

<div class="content-scroll">
	<div class=" book-description">

		<div class="picBackround">
			<div class="zoom-wrapper">
				<div class="image-container">
					<img src="@Html.DisplayFor(model => model.ImageURL)" width="350" height="450" id="mainImage" />
					<div class="zoom-lens" id="zoomLens"></div>
				</div>
				<div class="zoom-result" id="zoomResult"></div>
			</div>

		</div>
		<div class="information">
			<h2>@Html.DisplayFor(model => model.Name)</h2>
			<p>
				Издател: @Html.DisplayNameFor(model => model.Publishers.Name)
				<br />
				Автор:@Html.DisplayFor(model => model.Authors.Name)
			</p>
			<div class="star-info">
				<div><img src="~/Photos/starsBuchler.png" width="120" height="100" /></div>
				<div>
					<p>
						<br />
						5  Мнения | <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Contacts">Напишете отзив</a>
					</p>

				</div>
				<br />
			</div>
			<h2>@Html.DisplayFor(model => model.Price) лв.</h2>
			<br />
			<ul class="grey-list">
				<li>Преводач: Милена Ташева;</li>
				<li>Адаптация на корица: Фиделия Косева.;</li>
			</ul>
			<div class="addFav">
				<div>
					<h5><i>Добави в любими:</i></h5>
				</div>
				<div>
					<form method="post" asp-controller="Favorite" asp-action="Add" id="favoriteForm">
						@Html.AntiForgeryToken()
						<button type="button" id="likeButton" data-book-id="@Model.Id" class="heart-button" aria-label="Добави в любими">
							<svg id="heartIcon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="32" height="32" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
								<path d="M20.8 4.6c-1.6-1.5-4.1-1.5-5.7 0l-.9.9-.9-.9c-1.6-1.5-4.1-1.5-5.7 0s-1.6 4.1 0 5.7l6.6 6.6 6.6-6.6c1.6-1.6 1.6-4.1 0-5.7z"></path>
							</svg>
						</button>
					</form>

					<div id="message" style="display:none; position:fixed; top:0; left:50%; transform:translateX(-50%); background-color:green; color:white; padding:10px; z-index:1000;">
						Запазено в любими!
					</div>
				</div>
			</div>
			@* cart *@
			<div class="addCart">
				<div>
					<h5><i>Добави в количка:</i></h5>
				</div>
				<div>
					<form method="post" asp-controller="Cart" asp-action="Add" id="cartForm">
						@Html.AntiForgeryToken()
						<button type="button" id="cartButton" data-book-id="@Model.Id" class="cart-button" aria-label="Добави в количка">
							<svg id="cartIcon" xmlns="http://www.w3.org/2000/svg"
								 width="32" height="32"
								 viewBox="0 0 24 24"
								 fill="none"
								 stroke="currentColor"
								 stroke-width="2"
								 stroke-linecap="round"
								 stroke-linejoin="round">

								<!-- Wheels -->
								<circle cx="9" cy="21" r="1" />
								<circle cx="20" cy="21" r="1" />

								<!-- Cart Body -->
								<path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6" />
							</svg>

						</button>
					</form>

					<div id="cart-message" style="display:none; position:fixed; top:0; left:50%; transform:translateX(-50%); background-color:green; color:white; padding:10px; z-index:1000;">
						Добавено в количка!
					</div>
				</div>
		</div>
		<div class="book-details">
			<table>
				<tr>
					<td class="label">Автор</td>
					<td class="value">@Html.DisplayFor(model => model.Authors.Name)</td>
				</tr>
				<tr>
					<td class="label">Издателство</td>
					<td class="value">@Html.DisplayFor(model => model.Publishers.Name)</td>
				</tr>
				<tr>
					<td class="label">ISBN</td>
					<td class="value">	@Html.DisplayFor(model => model.CatNumber)</td>
				</tr>
				<tr>
					<td class="label">Година на издаване</td>
					<td class="value">@Html.DisplayFor(model => model.Year)</td>
				</tr>
				<tr>
					<td class="label">Жанр</td>
					<td class="value">@Html.DisplayFor(model => model.Genres.Name)</td>
				</tr>
				<tr>
					<td class="label">Категория</td>
					<td class="value">@Html.DisplayFor(model => model.Categories.Name)</td>
				</tr>
			</table>
		</div>
	</div>

</div>
<br />
<hr class="center-grey-line" />
<div class="tabs-center">
	<div class="tabs">
		<div class="tab-buttons">
			<button class="tab-btn active" data-tab="description">Пълно описание</button>
			<button class="tab-btn" data-tab="reviews">Мнения</button>
			<button class="tab-btn" data-tab="shipping">Цени за доставка</button>
		</div>

		<div class="tab-content active" id="description">
			<p>		@Html.DisplayFor(model => model.Plot) </p>
		</div>
		<div class="tab-content" id="reviews">
			<div class="form-wrapper">
				<form action="#" method="post">
					<div class="form-fields">
						<label for="name">Вашето име:</label>
						<input type="text" id="name" name="name" required>

						<label for="comment" style="margin-top: 15px;">Коментар:</label>
						<textarea id="comment" name="comment" rows="4" required></textarea>
					</div>

					<div class="form-submit">
						<button type="submit">Изпрати коментар</button>
					</div>
				</form>
			</div>
		</div>
		<div class="tab-content" id="shipping">
			<p style="color:grey;"><b>Поръчките от Онлайн книжарница Ciela.com се доставят от Спиди, Еконт и BoxNow за България, и от Български пощи за чужбина.</b></p>
			<p style="color:red;">
				За поръчки под 50 лв., стойността на доставката е фиксирана на <b>5,99 лв.</b>
				За поръчки с BOX NOW доставката е <b>3,99 лв.</b>
				За поръчки на обща стойност над 50 лв. доставката е <b>безплатна.</b>
			</p>
			За чужбина доставката се изчислява според тарифите на Български пощи, и зависи от избраната държавата, броя, големината и теглото на поръчаните продукти. Крайната стойност се визуализира, преди завършване на поръчката.
			<b>За поръчка на правен софутер няма доставка. Получавате потребителско име и парола по предоставен имейл след потвърдено заплащане.</b>

		</div>
	</div>

</div>

@if (User.IsInRole("Admin"))
{
	<div>
		Брой: 	@Html.DisplayFor(model => model.Quantity)
		<br />
		Дата на добавяне:@Html.DisplayFor(model => model.DateRegister)
	</div>

	<div>
		<a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
		<a asp-action="Index">Назад</a>
	</div>
}



<script>
	document.querySelectorAll('.tab-btn').forEach(button => {
	  button.addEventListener('click', () => {
		const tab = button.dataset.tab;

		// Активиране на бутоните
		document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
		button.classList.add('active');

		// Показване на съответното съдържание
		document.querySelectorAll('.tab-content').forEach(content => {
		  content.classList.remove('active');
		});
		document.getElementById(tab).classList.add('active');
	  });
	});
</script>

<script>
	const img = document.getElementById('mainImage');
	const lens = document.getElementById('zoomLens');
	const result = document.getElementById('zoomResult');

	lens.style.backgroundImage = `url(${img.src})`;
	lens.style.backgroundRepeat = "no-repeat";

	const zoom = 2;

	img.addEventListener('mousemove', moveLens);
	lens.addEventListener('mousemove', moveLens);
	img.addEventListener('mouseenter', showZoom);
	img.addEventListener('mouseleave', hideZoom);

	function moveLens(e) {
	  const pos = getCursorPos(e);
	  let x = pos.x - lens.offsetWidth / 2;
	  let y = pos.y - lens.offsetHeight / 2;

	  if (x > img.width - lens.offsetWidth) x = img.width - lens.offsetWidth;
	  if (x < 0) x = 0;
	  if (y > img.height - lens.offsetHeight) y = img.height - lens.offsetHeight;
	  if (y < 0) y = 0;

	  lens.style.left = x + "px";
	  lens.style.top = y + "px";

	  result.style.backgroundImage = `url(${img.src})`;
	  result.style.backgroundSize = (img.width * zoom) + "px " + (img.height * zoom) + "px";
	  result.style.backgroundPosition = `-${x * zoom}px -${y * zoom}px`;
	}

	function getCursorPos(e) {
	  const rect = img.getBoundingClientRect();
	  const x = e.pageX - rect.left - window.scrollX;
	  const y = e.pageY - rect.top - window.scrollY;
	  return { x, y };
	}

	function showZoom() {
	  lens.style.display = "block";
	  result.style.display = "block";
	}

	function hideZoom() {
	  lens.style.display = "none";
	  result.style.display = "none";
	}
</script>
<script>
	document.addEventListener('DOMContentLoaded', function () {
		const likeButton = document.getElementById('likeButton');
		const bookId = likeButton.dataset.bookId;
		const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
		const message = document.getElementById('message');

		likeButton.addEventListener('click', function () {
			fetch('/Favorites/Add', {  // Update URL here from '/Favorite/Add' to '/Favorites/Add'
				method: 'POST',
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded',
					'RequestVerificationToken': token
				},
				body: `bookId=${encodeURIComponent(bookId)}`
			})
			.then(response => response.json())
			.then(data => {
				if (data.success) {
					likeButton.classList.add('liked');
					message.style.display = 'block';
					setTimeout(() => message.style.display = 'none', 3000);
				} else {
					alert("Грешка: " + data.message);
				}
			})
			.catch(err => {
				alert("Грешка при заявката.");
				console.error(err);
			});
		});
	});
</script>
	<script>
				document.addEventListener('DOMContentLoaded', function () {
			const cartButton = document.getElementById('cartButton');
			const bookId = cartButton.dataset.bookId;
			const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
			const message = document.getElementById('cart-message');

			cartButton.addEventListener('click', function () {
				fetch('/Carts/Add', { // Ensure this matches your controller route
					method: 'POST',
					headers: {
						'Content-Type': 'application/x-www-form-urlencoded',
						'RequestVerificationToken': token
					},
					body: `bookId=${encodeURIComponent(bookId)}`
				})
				.then(response => response.json())
				.then(data => {
					if (data.success) {
						cartButton.classList.add('added-to-cart');
						message.style.display = 'block';
						setTimeout(() => message.style.display = 'none', 3000);
					} else {
						alert("Грешка: " + data.message);
					}
				})
				.catch(err => {
					alert("Грешка при добавяне в количката.");
					console.error(err);
				});
			});
		});

	</script>
